{"version":3,"sources":["api/util.js","api/api.js","api/main.js","components/GameBoard.js","images/articulate.jpeg","App.js","reportWebVitals.js","index.js"],"names":["random_choice","array","Math","floor","random","length","create_table","rows","columns","table","document","createElement","tbody","i","tr","j","td","appendChild","Color","RED","YELLOW","GREEN","BLUE","WordStatus","HOLDING","DEFERED","PLAYED","DISCARDED","PlayStatus","Category","name","color","image","is_wild","this","toLowerCase","Word","word","category","Team","curr_category","undefined","total_wins","final_turn","turns","Deck","unplayed","played","categories","util","set","get","Array","from","delete","push","Turn","team","deck","words","Map","Object","values","map","status","_draw_word","draw_from","from_status","to_status","temp_word","shift","index","indexOf","splice","num_cards_held","_draw_and_hold","_move_word","to_category","_release_and_draw","Game","teams","object","max_cycles","max_held","curr_turn_num","curr_team","curr_turn","interval","import_json","arrange_segments","category_key","categories_map","Set","keys","wild_category","import_categories","import_words","wild_position","segments","ordered","init_turn","timer","cards","getElementById","node","innerText","JSON","stringify","obj","key","value","prepend","window","clearInterval","end_turn","console","log","update_team_wins","check_end_game","end_game","update_team","advance_turn","discard_word","win_word","defer_word","wins","calculate_category","calculate_cycle","current_word","start_game","json_deck","num_teams","parseInt","api","create_test_teams","game","start","categoryColours","GameBoard","props","tableData","useState","numTeams","numCategories","numRows","numCols","cols","createGrid","forEach","row","initialiseTable","categoryTable","setCategoryTable","updateTable","teamNumber","categoryNumber","moveTeam","id","rowData","cellData","style","backgroundColor","width","height","Button","onClick","gameState","className","idx","playStatus","startRound","variant","timeLeft","endTurn","current_word_category","current_word_text","App","setGame","setTimeLeft","setPlayStatus","setNumTeams","useEffect","setTimeout","src","articulate","alt","ButtonGroup","toggle","vertical","radio","ToggleButton","type","checked","onChange","e","currentTarget","main","clearTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.52ade6c8.chunk.js","sourcesContent":["export function random_choice(array) {\n    return array[Math.floor(Math.random() * array.length)];\n}\n\nexport function wild_category(Category) {\n    const keys = Object.keys(Category);\n    keys.splice(Category.WILD, 1);\n    return Category[random_choice(keys)];\n};\n\nexport function choice_from_set(set) {\n    return random_choice(Array.from(set));\n};\n\nexport function shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n};\n\nexport function map_to_object(map) {\n    const obj = {};\n    for (const [key, value] of map) {\n        obj[key] = value;\n    }\n    return obj;\n};\n\nexport function create_table(rows, columns) {\n    const table = document.createElement('table');\n    const tbody = document.createElement('tbody');\n    for (let i = 0; i < rows; i++) {\n        const tr = document.createElement('tr');\n        for (let j = 0; j < columns; j++) {\n            const td = document.createElement('td');\n            tr.appendChild(td);\n        }\n        tbody.appendChild(tr);\n    }\n    table.appendChild(tbody);\n    return table;\n}\n","import * as util from './util.js';\n\nconst DEFAULT_NUM_CATEGORIES = 7;\nconst DEFAULT_MAX_CYCLES = 1;//6\nconst DEFAULT_MAX_HELD = 2;\nconst DEFAULT_MAX_TEAMS = 4;\nconst DEFAULT_TIMER_SECONDS = 120;\nconst SECOND_IN_MILLISECONDS = 1000;\n\nexport const Color = {\n    RED: \"#ff0000\",\n    YELLOW: \"#ffff00\",\n    GREEN: \"#00ff00\",\n    BLUE: \"#0000ff\"\n}\n\nexport const WordStatus = {\n    HOLDING: \"holding\",\n    DEFERED: \"defered\",\n    PLAYED: \"played\",\n    DISCARDED: \"discarded\"\n}\n\nexport const PlayStatus = {\n    PREPARING: 0,\n    PLAYING: 1,\n    ENDED: 2\n}\n\nexport class Category {\n    constructor(name, color, image, is_wild) {\n        this.name = name.toLowerCase();\n        this.color = color;\n        this.image = image;\n        this.is_wild = is_wild;\n    }\n}\n\nexport class Sections {\n\n    constructor(categories, wild_position) {\n\n    }\n\n    wild() {\n\n    }\n\n    get(i) {\n        return [i];\n    }\n}\n\nexport class Word {\n    constructor(word, category) {\n        this.word = word;\n        this.category = category;\n    }\n}\n\nexport class Team {\n    constructor(name, color) {\n        this.name = name;\n        this.color = color;\n        this.curr_category = undefined;\n        this.total_wins = 0;\n        this.final_turn = false;\n        this.turns = [];\n    }\n}\n\nexport class Deck {\n\n    constructor(unplayed) {\n        this.unplayed = unplayed;\n        this.played = [];\n    }\n\n    draw_from(category, categories) {\n        if (category.is_wild === true) {\n            category = util.random_choice(categories);\n        }\n\n        const word = util.choice_from_set(this.unplayed.get(category));\n\n        this.unplayed.get(category).delete(word);\n\n        this.played.push(word);\n\n        return word;\n    }\n\n\n}\n\nexport class Turn {\n    constructor(team, category, deck, categories) {\n        this.team = team;\n        this.category = category;\n        this.deck = deck;\n        this.words = new Map(\n                Object.values(WordStatus).map(status => [status, []])\n                );\n        this.status = PlayStatus.PREPARING;\n        //this.timer = DEFAULT_TIMER_SECONDS;\n        this.categories = categories;\n\n        this._draw_word();\n    }\n\n    get wins() {\n        return this.words.get(WordStatus.PLAYED).length;\n    }\n\n\n    _draw_and_hold() {\n        const word = this.deck.draw_from(this.category, this.categories);\n        this.words.get(WordStatus.HOLDING).push(word);\n    }\n\n    _move_word(from_status, to_status, word) {\n        let temp_word = undefined;\n        if (word === undefined) {\n            temp_word = this.words.get(from_status).shift();\n        } else {\n            const index = this.words.get(from_status).indexOf(word);\n            temp_word = this.words.get(from_status).splice(index, 1);\n        }\n        this.words.get(to_status).push(temp_word);\n    }\n\n    _draw_word() {\n\n        if (\n                this.status === PlayStatus.PREPARING\n                && this.words.get(WordStatus.HOLDING).length !== 0\n           ) {\n            return;\n        }\n\n        if (\n                this.team.final_turn === true\n                && this.words.get(WordStatus.HOLDING).length !== 0\n           ) {\n            return;\n        }\n\n        const num_cards_held = (\n                this.words.get(WordStatus.DEFERED).length\n                + this.words.get(WordStatus.HOLDING).length\n                );\n\n        if (num_cards_held === 0) {\n            this._draw_and_hold();\n            return;\n        }\n\n        if (num_cards_held < DEFAULT_MAX_HELD) {\n            this._draw_and_hold();\n        } else {\n            this._move_word(WordStatus.DEFERED, WordStatus.HOLDING);\n        }\n    }\n\n    _release_and_draw(to_category, word) {\n        this._move_word(WordStatus.HOLDING, to_category, word);\n        this._draw_word();\n    }\n\n    discard_word(word) {\n        this._release_and_draw(WordStatus.DISCARDED, word);\n    }\n\n    win_word(word) {\n        this._release_and_draw(WordStatus.PLAYED, word);\n\n        //if (this.team.final_turn === true) {\n        //    this.timer = 0;\n        //}\n\n    }\n\n    defer_word(word) {\n        this._release_and_draw(WordStatus.DEFERED, word);\n    }\n}\n\n\nexport class Game {\n\n    constructor(\n            teams,\n            object,\n            max_cycles = DEFAULT_MAX_CYCLES,\n            max_held = DEFAULT_MAX_HELD\n            ) {\n        this.teams = teams;\n        this.max_cycles = max_cycles;\n        this.max_held = max_held;\n        this.turns = [];\n        this.curr_turn_num = 0;\n        this.curr_team = undefined;\n        this.curr_turn = undefined;\n        this.interval = undefined;\n\n        this.import_json(object);\n        this.arrange_segments(2);\n    }\n\n    import_words(object) {\n        const unplayed = new Map();\n\n        for (const category_key of Object.keys(object)) {\n\n            let category = this.categories_map.get(category_key);\n\n            unplayed.set(\n                    category,\n                    new Set(\n                        object[category_key].map(\n                            word => new Word(word, category)\n                            )\n                        )\n                    )\n        }\n\n        this.deck = new Deck(unplayed);\n    }\n\n    import_categories(object) {\n\n        this.categories = [];\n        this.categories_map = new Map();\n\n        for (const category_key of Object.keys(object)) {\n            let category = new Category(category_key);\n            // more logic for other data\n            this.categories_map.set(category_key, category);\n            this.categories.push(category);\n        }\n\n        // hard coded for wild\n        this.wild_category = new Category(\"wild\", undefined, undefined, true);\n\n    }\n\n    import_json(object) {\n        this.import_categories(object);\n        this.import_words(object);\n    }\n\n    arrange_segments(wild_position) {\n        this.segments = this.categories;\n        if (wild_position !== undefined) {\n            this.segments.splice(wild_position, 0, this.wild_category);\n        }\n    }\n\n    start(ordered) {\n        // Probably don't need this practically\n        if (ordered === false) {\n            util.shuffle(this.teams);\n        }\n        for (const team of this.teams) {\n            team.curr_category = this.segments[0];\n        }\n        this.init_turn();\n    }\n\n    get turn_timer() {\n        return this.curr_turn.timer;\n    }\n\n    init_turn() {\n        this.curr_team = this.teams[this.curr_turn_num % this.teams.length];\n        this.curr_turn = new Turn(\n                this.curr_team,\n                //redundant?\n                (\n                 (this.curr_team.final_turn === true) ?\n                 this.wild_category : this.curr_team.curr_category\n                ),\n                this.deck,\n                this.categories\n                );\n        this.turns.push(this.curr_turn);\n        // this.show_words();\n    }\n\n    show_words() {\n        let cards = document.getElementById(\"words\");\n        let node = document.createElement(\"p\");\n        node.innerText = JSON.stringify(\n                util.map_to_object(this.curr_turn.words),\n                null,\n                1\n                );\n        cards.prepend(node);\n    }\n\n    tick_timer() {\n        if (this.curr_turn.timer > 0) {\n            this.curr_turn.timer--;\n        } else {\n            window.clearInterval(this.interval);\n            this.end_turn();\n        }\n\n    }\n\n    start_turn() {\n        this.curr_turn.status = PlayStatus.PLAYING;\n        //this.interval = window.setInterval( () => this.tick_timer() , 1 * SECOND_IN_MILLISECONDS);\n        //this.interval = window.setInterval(function() { this.tick_timer.bind(this) }, 1 * SECOND_IN_MILLISECONDS);\n        //window.setInterval(this.end, DEFAULT_TIMER_SECONDS * SECOND_IN_MILLISECONDS);\n    }\n\n    end_turn() {\n        console.log(\"Times up!\");\n        //this.curr_turn.timer = 0;\n        this.curr_turn.status = PlayStatus.ENDED;\n        this.update_team_wins();\n\n        if (this.check_end_game() === true) {\n            this.end_game();\n        } else {\n            this.update_team();\n            this.advance_turn();\n            this.init_turn();\n        }\n\n    }\n\n    discard_word() {\n        this.curr_turn.discard_word();\n        // this.show_words();\n    }\n\n    win_word() {\n        console.log('clicked win')\n        this.curr_turn.win_word();\n        // this.show_words();\n    }\n\n    defer_word() {\n        this.curr_turn.defer_word();\n        // this.show_words();\n    }\n\n    update_team_wins() {\n        const wins = this.curr_turn.wins;\n        console.log(`${this.curr_team.name} scored ${wins}`);\n        this.curr_team.total_wins += wins;\n\n    }\n\n    check_end_game() {\n        return this.curr_team.final_turn && this.curr_turn.wins > 0;\n    }\n\n    update_team() {\n        this.curr_team.curr_category = this.calculate_category(this.curr_team.total_wins);\n\n        if (this.calculate_cycle(this.curr_team.wins) >= this.max_cycles) {\n            this.curr_team.final_turn = true;\n            this.curr_team.curr_category = this.wild_category;\n        }\n    }\n\n    calculate_category(total_wins) {\n        return this.segments[total_wins % this.segments.length];\n    }\n\n    calculate_cycle(total_wins) {\n        return Math.floor(total_wins / this.segments.length);\n    }\n\n    advance_turn() {\n        this.curr_turn_num += 1;\n    }\n\n    end_game() {\n        console.log(this.curr_team.name + \" won!\");\n    }\n\n    create_category_table() {\n        return util.create_table(this.teams.length, this.segments.length);\n    }\n\n    create_position_table() {\n        return util.create_table(this.teams.length, this.max_cycles);\n    }\n\n    get current_word() {\n        if (this.curr_turn == null) {\n            return undefined;\n        } else {\n            return this.curr_turn.words.get(WordStatus.HOLDING)[0];\n        }\n    }\n\n    get current_word_text() {\n        const word = this.current_word;\n        if (word == null) {\n            return undefined;\n        } else {\n            return word.word;\n        }\n    }\n\n    get current_word_category() {\n        const word = this.current_word;\n        if (word == null) {\n            return undefined;\n        } else {\n            return word.category.name;\n        }\n    }\n\n    get segment_names() {\n        if (this.segments == null) {\n            return undefined;\n        } else {\n            return this.segments.map(category => category.name);\n        }\n    }\n\n    get current_team_wins() {\n        return this.curr_turn.wins;\n    }\n\n}\n","import * as api from './api.js';\nimport * as ui from './ui.js';\n\n/*\n * TODO\n * Game state:\n * for each team:\n * \tcurrent category\n * \tcurrent wins\n * \ttotal wins\n * \tname\n * \tcolor\n */\n\nfunction import_deck(json_deck) {\n\n    console.log(json_deck)\n        //return Deck.from_json(json_deck)\n}\n\nfunction create_teams() {\n    const num_teams = parseInt(prompt(\"How many teams?: \", \"\"));\n    let teams = [];\n    for (let i = 0; i < num_teams; i++) {\n        const name = prompt(\"Enter Team name: \", \"\");\n        teams.push(new api.Team(name, Object.values(api.Color)[i]));\n    }\n    return teams;\n}\n\nfunction create_test_teams(num_teams) {\n    // const num_teams = 2;\n    var num_teams = parseInt(num_teams);\n    //const num_teams = parseInt(prompt(\"How many teams?: \", \"\"));\n    let teams = [];\n    for (let i = 0; i < num_teams; i++) {\n        const name = `Team ${i+1}`;\n        //const name = prompt(\"Enter Team name: \", \"\");\n        teams.push(new api.Team(name, Object.values(api.Color)[i]));\n    }\n    return teams;\n}\n\nexport function start_game(json_deck, num_teams) {\n\n    const teams = create_test_teams(num_teams);\n    const game = new api.Game(teams, json_deck);\n\n    // let button = document.getElementById(\"start\");\n    // button.style.display = \"none\";\n\n    // TODO\n    //const interval = window.setInterval(function() {ui.update_screen(game)}, 100);\n    //window.requestAnimationFrame(function() {update_timer(game)});\n    //category.appendChild(game.create_category_table());\n\n    //const position = document.getElementById('position');\n    //position.appendChild(game.create_position_table());\n\n    game.start();\n\n    return game;\n\n}\n","\nimport './GameBoard.css';\nimport Button from 'react-bootstrap/Button';\nimport { useState, useEffect } from \"react\";\n\nconst categoryColours = {\n    'object': '#0099DA',\n    'action': '#F37027',\n    'wild': '#BB99DA',\n    'world': '#016FA5',\n    'person': '#FFCB04',\n    'random': '#ED1C24',\n    'nature': '#008752',\n}\n\nexport default function GameBoard(props) {\n\n    const [categoryTable, setCategoryTable] = useState(initialiseTable(props.numTeams, 7));\n\n    function updateTable(table, teams) {\n        teams.forEach(\n            (team, i) =>\n            moveTeam(table, i, team.total_wins % 7)\n        )\n        setCategoryTable(table);\n    }\n\n    return (\n        <div>\n            <div id='state'>\n                <div id='timer'></div>\n                <div id='board'>\n                    <div id='category'>\n                        {createTable(categoryTable)}\n                    </div>\n                    <div id='position'></div>\n                </div>\n                <pre id='teams'></pre>\n            </div>\n\n            <Button onClick={() => console.log(props.gameState)}>Print Game State</Button>\n\n            <div className=\"team-div\" >\n                {props.gameState.teams.map((team, idx) => (\n                    <div className=\"team-header\" key={idx}>\n                        <p>{team.name} </p>\n                        <p>{team.total_wins}</p>\n                    </div>\n                ))}\n            </div>\n\n            {props.playStatus === false ?\n            <div>\n                <Button onClick={() => props.startRound()} variant=\"success\">Start Round</Button>\n            </div>\n            :\n            <div>\n                <h1>{props.timeLeft}</h1>\n\n                <div id='controls'>\n                {/* <button id='start'>Start</button> */}\n                <Button id='defer' onClick={() => props.gameState.defer_word()}>Skip</Button>\n                <Button id='win' onClick={() => props.gameState.win_word()}>Win</Button>\n                {/* <button id='discard' onClick={() => game.discard_word()} >Discard</button> */}\n                <Button id='end' onClick={() => {\n                    props.endTurn();\n                    updateTable(categoryTable, props.gameState.teams);\n                    }\n                }>End</Button>\n                </div>\n            </div>\n            }\n\n            <div className=\"card\">\n                <div className=\"card-category border-top\" style={{backgroundColor: categoryColours[props.gameState.current_word_category]}}>{props.gameState.current_word_category}</div>\n                <div className=\"card-word\">{props.gameState.current_word_text}</div>\n                <div className=\"card-category border-bottom\" style={{backgroundColor: categoryColours[props.gameState.current_word_category]}}>{props.gameState.current_word_category}</div>\n            </div>\n\n        </div>\n    )\n}\n\nfunction initialiseTable(numTeams, numCategories) {\n    let table = createGrid(numTeams, numCategories);\n    table.forEach(\n        row => row[0] = \"*\"\n    );\n    return table;\n}\n\nfunction moveTeam(table, teamNumber, categoryNumber) {\n    table[teamNumber].forEach(\n        (value, i, array) =>\n        array[i] = (i === categoryNumber ? \"*\" : undefined)\n    );\n}\n\nfunction createGrid(numRows, numCols) {\n    let rows = [];\n    for (let i = 0; i < numRows; i++) {\n        let cols = [];\n        for (let j = 0; j < numCols; j++) {\n            cols.push(undefined);\n        }\n        rows.push(cols);\n    }\n    return rows;\n}\n\nfunction createTable(tableData) {\n return (\n  <table>\n   <tbody>\n   {\n    tableData.map(rowData => {\n      return (\n        <tr>\n          {\n           rowData.map((cellData, i) => {\n              return (\n                <td\n                    style={{\n                        backgroundColor: Object.values(categoryColours)[i],\n                        width: \"50px\",\n                        height: \"50px\",\n                    }}\n                > {cellData} </td>);\n           })\n          }\n        </tr>\n    );\n    })\n   }\n  </tbody>\n  </table>\n )\n}\n","export default __webpack_public_path__ + \"static/media/articulate.c4b5174f.jpeg\";","import './App.css';\nimport * as main from './api/main';\nimport { useState, useEffect } from \"react\";\nimport GameBoard from './components/GameBoard';\nimport words from './static/words.json';\nimport articulate from './images/articulate.jpeg';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\n\n\nfunction App() {\n  const [game, setGame] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(-1);\n  const [playStatus, setPlayStatus] = useState(false);\n  const [numTeams, setNumTeams] = useState('2');\n\n  const radios = [\n    { name: '2', value: '2' },\n    { name: '3', value: '3' },\n    { name: '4', value: '4' },\n  ];\n  var timer;\n\n  useEffect(() => {\n    if (timeLeft > 0) {\n      timer = setTimeout(() => {\n        setTimeLeft(timeLeft - 1)\n      }, 1000);\n    }\n    else if (timeLeft == 0 && playStatus == true) {\n      setPlayStatus(false);\n      game.end_turn();\n    }\n  }, [timeLeft]);\n\n  const startRound = () => {\n    setPlayStatus(true);\n    setTimeLeft(50);\n  }\n\n  const endTurn = () => {\n    clearTimeout(timer);\n    setTimeLeft(0); // this causes the game to end turn due to useEffect\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={articulate} className=\"App-logo\" alt=\"logo\" />\n\n          {game === null &&\n\n          <div>\n            Number of Teams\n            <ButtonGroup toggle vertical>\n              {radios.map((radio, idx) => (\n                <ToggleButton\n                  key={idx}\n                  type=\"radio\"\n                  variant=\"secondary\"\n                  name=\"radio\"\n                  value={radio.value}\n                  checked={numTeams === radio.value}\n                  onChange={(e) => setNumTeams(e.currentTarget.value)}\n                  className=\"team-size\"\n                >\n                  {radio.name}\n                </ToggleButton>\n              ))}\n            </ButtonGroup>\n\n            <Button variant=\"primary\" onClick={() => {\n              setGame(main.start_game(words, numTeams));\n            }}> Create Game </Button>\n          </div>\n          }\n\n          {game !== null &&\n            <GameBoard gameState={game} numTeams={numTeams} playStatus={playStatus} timeLeft={timeLeft} startRound={startRound} endTurn={endTurn}></GameBoard>\n          }\n        <pre id='words'>\n        </pre>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}